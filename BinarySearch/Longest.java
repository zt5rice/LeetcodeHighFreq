import java.util.Arrays;

public class Longest {
    public int longest(int[] array) {
        if (array == null || array.length == 0) {
            return 0;
        }
        int[] dp = new int[array.length]; // dp[i] - smallest ends with size of i, increasing subseq
        int[] longest = { 1 }; // longest[0] - longest[0], cur length of longest subseqeunce
        dp[0] = array[0];
        for (int i = 1; i < array.length; i++) {
            binarySearch(dp, longest, array[i]);
        }
        return longest[0];
    }

    private void binarySearch(int[] dp, int[] longest, int target) {
        if (dp[longest[0] - 1] < target) {
            dp[longest[0]] = target;
            longest[0]++;
            return;
        }
        /*
         * not if (dp[longest[0] - 1] < target) { longest[0]++; dp[longest[0]] = target;
         * return; }
         */
        // find the index, dp[i] > target, i - 0 to longest[0] - 1;
        int left = 0;
        int right = longest[0] - 1;
        int mid;
        while (left < right - 1) {
            mid = left + (right - left) / 2;
            if (dp[mid] < target) { // not equal
                left = mid;
            } else {
                right = mid;
            }
        }
        if (dp[left] > target) {
            dp[left] = target;
        } else {
            dp[right] = target;
        }
        return;
    }

    public static void main(String[] args) {
        Longest sol = new Longest();
        int[] array;
        int res;

        array = new int[] {123,236,227,258,138,441,496,479,124,389,84,104,143,24,363,379,304,317,10,121,179,179,267,94,326,225,255,179,176,236,191,369,354,223,262,355,178,493,447,352,24,75,128,461,108,277,31,188,335,490,246,226,344,204,412,400,184,428,42,44,167,453,452,261,394,69,284,316,245,471,278,4,216,157,127,15,431,187,57,327,415,117,136,274,313,401,242,286,158,420,177,389,34,157,482,278,66,325,189,250,65,33,38,469,400,235,463,371,212,414,124,119,498,42,200,281,282,407,269,384,173,457,221,178,435,233,382,332,445,434,345,377,407,499,352,485,70,439,73,194,376,434,125,362,476,440,326,50,402,250,333,122,340,93,135,189,471,441,166,489,143,265,284,41,318,459,324,331,206,125,48,370,314,312,474,337,283,168,273,499,333,272,307,376,462,187,200,495,143,1,380,271,218,284,30,350,490,23,59,302,91,190,369,310,157,99,33,422,108,243,314,117,417,188,443,254,161,36,59,70,431,301,344,102,204,332,42,438,241,180,319,297,248,17,256,364,161,354,176,350,248,438,489,33,477,260,329,1,128,129,379,27,500,232,29,365,276,44,290,359,129,291,294,35,5,47,149,368,232,291,467,75,74,9,497,225,243,103,483,22,2,29,148,470,31,149,43,86,28,386,451,94,190,206,6,400,188,468,309,316,64,50,465,274,130,44,200,340,398,111,64,47,373,379,87,482,175,452,257,249,383,314,233,197,300,2,334,409,433,37,54,156,412,96,162,469,354,440,263,154,254,12,208,401,408,37,194,230,137,301,45,228,130,65,322,54,160,351,164,301,126,22,106,208,480,239,34,280,424,3,411,138,53,44,495,417,105,325,410,197,376,442,158,352,79,68,455,278,406,10,166,256,471,274,71,209,442,282,229,290,227,171,317,170,390,260,35,459,168,418,411,43,442,178,216,88,345,483,118,215,352,436,195,239,175,416,48,486,86,292,368,52,459,366,111,354,260,459,185,82,13,344,22,86,425,442,327,353,258,362,367,91,347,28,317,463,267,167,351,250,77,499,484,208,345,466,13,476,236,231,381,309,392,122,264,411,43,13,334,452,398,438,279,273,262,493,457,486,37,281,370,18,358,316,72,239,481,411,99,81,267,144,107,35,149,11,12,101,340,351,182,135,250,36,22,155,104,332,179,425,100,119,44,154,161,486,275,337,313,422,179,169,103,42,483,61,93,398,296,96,21,51,415,286,491,112,54,179,251,464,85,301,87,345,469,45,152,356,194,406,226,355,314,30,340,475,474,242,5,299,210,177,409,434,295,235,395,415,445,467,315,461,341,3,459,237,124,394,203,271,312,184,269,175,446,187,101,253,233,275,261,493,458,73,20,253,45,190,373,276,325,91,128,413,325,382,448,139,228,137,279,100,59,491,1,54,161,482,331,121,61,97,89,280,18,192,274,26,221,301,124,16,459,460,353,422,411,470,119,-452};
        res = sol.longest(array);
        System.out.println("Input  : " + Arrays.toString(array));
        System.out.println("Output : " + res);
    }
}
/*
 * method: dp M1: dp[i] - longest length ending at array[i-1] base case dp[1] =
 * 1; induction: 1) j [0, i) rev, max(dp[j] + 1), if array[j] < array[i] tc:
 * o(n2) sc: o(n)
 * 
 * 5, 2, 6, 3, 4, 7, 5 1 1 2 2 3 4 4
 * 
 * M2: | 5, 2, 6, 3, 4, 7, 5
 * 
 * binary search of array[i], find the largest index where dp[index] < array[i],
 * dp[index+1] = array[i], if index + 1 > longest, update int longest 1 0 1 2 3
 * 4 5 dp[i] - smallest element (array) when reaching subsequence length of i-1
 * 2 6
 */
